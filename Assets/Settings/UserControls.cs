//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/UserControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserControls"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""fd232599-ed46-4b48-9e35-daf176d8c166"",
            ""actions"": [
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""c24a6227-7465-4e4d-af2b-20de1c12bfa3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirectionUp"",
                    ""type"": ""Button"",
                    ""id"": ""d9387995-7a24-4c39-8de5-6923d9c34138"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirectionLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c0000c25-6c07-4ba9-9af4-ab24388ea5d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirectionDown"",
                    ""type"": ""Button"",
                    ""id"": ""42a6fd3c-f40d-42e2-8337-ebb749afe551"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirectionRight"",
                    ""type"": ""Button"",
                    ""id"": ""f9ec6a13-9665-4838-8b35-0080a114736d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""e5ff9bd2-e834-4915-ac51-3d29babe597f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef038401-11ed-4ec2-8582-86420ed61ef6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa013d67-19c4-4e97-a543-26403da623eb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13f6013e-39d2-48f4-b691-181505b0d3c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99d72034-bb0b-4c22-b713-3a034df49c18"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6f6775e-5424-4f63-92ab-4f1b6a64941f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74f6409b-8117-464d-8da5-cb7beb4abae3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Activate = m_Controls.FindAction("Activate", throwIfNotFound: true);
        m_Controls_DirectionUp = m_Controls.FindAction("DirectionUp", throwIfNotFound: true);
        m_Controls_DirectionLeft = m_Controls.FindAction("DirectionLeft", throwIfNotFound: true);
        m_Controls_DirectionDown = m_Controls.FindAction("DirectionDown", throwIfNotFound: true);
        m_Controls_DirectionRight = m_Controls.FindAction("DirectionRight", throwIfNotFound: true);
        m_Controls_Click = m_Controls.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_Activate;
    private readonly InputAction m_Controls_DirectionUp;
    private readonly InputAction m_Controls_DirectionLeft;
    private readonly InputAction m_Controls_DirectionDown;
    private readonly InputAction m_Controls_DirectionRight;
    private readonly InputAction m_Controls_Click;
    public struct ControlsActions
    {
        private @UserControls m_Wrapper;
        public ControlsActions(@UserControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Activate => m_Wrapper.m_Controls_Activate;
        public InputAction @DirectionUp => m_Wrapper.m_Controls_DirectionUp;
        public InputAction @DirectionLeft => m_Wrapper.m_Controls_DirectionLeft;
        public InputAction @DirectionDown => m_Wrapper.m_Controls_DirectionDown;
        public InputAction @DirectionRight => m_Wrapper.m_Controls_DirectionRight;
        public InputAction @Click => m_Wrapper.m_Controls_Click;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @DirectionUp.started += instance.OnDirectionUp;
            @DirectionUp.performed += instance.OnDirectionUp;
            @DirectionUp.canceled += instance.OnDirectionUp;
            @DirectionLeft.started += instance.OnDirectionLeft;
            @DirectionLeft.performed += instance.OnDirectionLeft;
            @DirectionLeft.canceled += instance.OnDirectionLeft;
            @DirectionDown.started += instance.OnDirectionDown;
            @DirectionDown.performed += instance.OnDirectionDown;
            @DirectionDown.canceled += instance.OnDirectionDown;
            @DirectionRight.started += instance.OnDirectionRight;
            @DirectionRight.performed += instance.OnDirectionRight;
            @DirectionRight.canceled += instance.OnDirectionRight;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @DirectionUp.started -= instance.OnDirectionUp;
            @DirectionUp.performed -= instance.OnDirectionUp;
            @DirectionUp.canceled -= instance.OnDirectionUp;
            @DirectionLeft.started -= instance.OnDirectionLeft;
            @DirectionLeft.performed -= instance.OnDirectionLeft;
            @DirectionLeft.canceled -= instance.OnDirectionLeft;
            @DirectionDown.started -= instance.OnDirectionDown;
            @DirectionDown.performed -= instance.OnDirectionDown;
            @DirectionDown.canceled -= instance.OnDirectionDown;
            @DirectionRight.started -= instance.OnDirectionRight;
            @DirectionRight.performed -= instance.OnDirectionRight;
            @DirectionRight.canceled -= instance.OnDirectionRight;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);
    public interface IControlsActions
    {
        void OnActivate(InputAction.CallbackContext context);
        void OnDirectionUp(InputAction.CallbackContext context);
        void OnDirectionLeft(InputAction.CallbackContext context);
        void OnDirectionDown(InputAction.CallbackContext context);
        void OnDirectionRight(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
